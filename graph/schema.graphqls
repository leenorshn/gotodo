# GraphQL schema example
#
# https://gqlgen.com/getting-started/
scalar Date
type Trans {
  _id: ID!
  from: Account!
  amount: Float!
  operation: String!
  date: Date!
}

type Account {
  _id: ID!
  balance: Float!
  dette: Float!
  gain: Float!
  totalWithDraw: Float!
  round: Int
  createdAt: Float!
  updatedAt: Float!
  user: User!
}

type Motar {
  _id: ID!
  association: String!
  numero: String!
  parking: String!
  city: String!
  owner: User!
}

type User {
  _id: ID!
  name: String!
  phone: String!
  password: String!
  dateNaissance: Int!
  avatar: String!
  address: String!
  account: Account!
}

type Query {
  motars: [Motar!]!
  trans: [Trans!]!
  getTrans(id: ID!): Trans
  accounts: [Account!]!
  account(id: ID!): Account
  users: [User!]!
  user(id: ID!): User
}

input NewUser {
  name: String!
  phone: String!
  password: String!
  dateNaissance: Int!
  avatar: String
  address: String!
}

input UpdateUser {
  name: String
  dateNaissance: Int
  avatar: String
  address: String
}

input NewMotor {
  text: String!
  user: ID!
  association: String!
  numero: String!
  parking: String!
  city: String!
}

input UpdateMotor {
  text: String
  association: String
  numero: String
  parking: String
  city: String
}

input NewTransaction {
  from: String!
  to: String!
  amount: Float!
  operation: String!
}

type Auth {
  token: String!
  user: User!
}

type Mutation {
  #withdraw
  withdraw(from: ID!, amount: Float!): Trans
  payRent(from: ID!, amount: Float!): Trans
  achatCarburant(from: ID!, amount: Float!, quantity: Float!): Trans!

  #user mutations
  loginUser(phone: String!, password: String!): Auth!
  createUser(data: NewUser!): Auth!
  updateUser(id: ID!, data: UpdateUser!): User
  deleteUser(id: String!): Boolean!
  changePassword(phone: String, newPassword: String!): Boolean!
}
